<?php
require_once("LoadClass.php");
$pdo = Database::getInstance();

if((!isset($_REQUEST["f"]))||(isset($_REQUEST["f"])&&($_REQUEST["f"]=""))){
	
?>

<font face="Arial" size="3"><b>
        PHP MYSQL Class Generator
    </b>
</font>

<font face="Arial" size="2"><b>

        <form action="generator.php" method="POST" name="FORMGEN">

            1) Select Table Name:
            <br>

            <select name="tablename">

                <?php
					$sql="SELECT table_name FROM information_schema.tables WHERE table_schema = 'csh_testfact'";
					$res = $pdo->prepare($sql);
					$res->execute();
					foreach ($res as $table) {
						echo "<option value=\"" . $table['table_name'] . "\">" . $table['table_name'] . "</option>";
					}
				?>
            </select>

            <p>
                2) Type Class Name (ex. "test"): <br>
                <input type="text" name="classname" size="50" value="">
            <p>
                3) Type Name of Key Field:
                <br>
                <input type="text" name="keyname" value="" size="50">
                <br>
                <font size=1>
                    (Name of key-field with type number with autoincrement!)
                </font>
            <p>


                <input type="submit" name="s1" value="Generate Class">
                <input type="hidden" name="f" value="formshowed">

        </form>
		
    </b>
</font>
<p>
    <font size="1" face="Arial">
            this is a script from CrystalSkunk
    </font>


<?php
}
else {
/*******************************************************************************************/
/******************		DEBUT	FICHIER	CLASS		****************************************/
/*******************************************************************************************/
	$table = $_REQUEST["tablename"];
	$class = $_REQUEST["classname"];
	$key = $_REQUEST["keyname"];
	$dbn = Database::dbn();
	$dir = dirname(__FILE__);

	$filename = $dir . "/resources/" . "class." . strtolower($class) . ".php";

	// if file exists, then delete it
	if(file_exists($filename))
	{
		unlink($filename);
	}

	// open file in insert mode
	$file = fopen($filename, "w+");
	$filedate = date("d.m.Y");

	$page_classe ="";
	$page_classe = "<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        $class
* GENERATION DATE:  $filedate
* CLASS FILE:       $filename
* FOR MYSQL TABLE:  $table
* FOR MYSQL DB:     $dbn
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> CrystalSkunk
* -------------------------------------------------------
*
*/

// **********************
// CLASS DECLARATION
// **********************

class $class
{ ";

	$sql = "SHOW COLUMNS FROM $table;";
	$result = $pdo->prepare($sql);
	$result->execute();
	
	$list_vars = "
	public $$key;\n";
	$list_getMethods = '';
	$list_setMethods = '';
	$cdb = "$" . "database";
	foreach($result as $row)
	{
		$col=$row[0];
		$mname = "" . $col . "()";
		$mthis = "$" . "this->" . $col;
		$list_getMethods.= "
	function $mname
	{
		return $mthis;
	}
		";
		$val = "$" . "val";
		$mname = "set" . $col . "($" . "val)";
		$mthis = "$" . "this->" . $col . " = ";
		$list_setMethods.="
	function $mname
	{
		$mthis $val;
	}
		";
		
		if($col!=$key)
		{
			$list_vars.= "
	public $$col;";
		} 
	} 
	
	$page_classe.="
$list_vars
	private static $cdb; // Instance of class database
	private static \$lastInsertId;
		";

	$page_classe.= "

	public function __construct(\$data='')
	{
		if(\$data<>'')
			\$this->hydrate(\$data);
	}
	
	public function hydrate(array \$data) {
		foreach (\$data as \$key => \$value) {
			\$method = 'set'.ucfirst(\$key);
			if (method_exists(\$this, \$method)) {
				\$this->\$method(\$value);
			}
		}
	}
	";

	$page_classe.="
	";
	
	$page_classe.=$list_getMethods;	
		
	$page_classe.="
	";
	$page_classe.=$list_setMethods;
	$page_classe.= "
}
?>";

fwrite($file, $page_classe);

	print "
	<font face=\"Arial\" size=\"3\"><b>
			PHP MYSQL Class Generator
		</b>
		<p>
			<font face=\"Arial\" size=\"2\"><b>
					Class '$class' successfully generated as file '$filename'!
					<p>
						<a href=\"javascript:history.back();\">
							back
						</a>
						</p>
				</b></font></p>";
/*******************************************************************************************/
/******************			FIN	FICHIER	CLASS		****************************************/
/*******************************************************************************************/			


/*******************************************************************************************/
/******************		DEBUT	FICHIER	CLASSMGR	****************************************/
/*******************************************************************************************/
	$classOri = $class;
	$class .= 'Manager';
	$dir = dirname(__FILE__);

	$filename = $dir . "/resources/" . "class." . strtolower($class) . ".php";

	// if file exists, then delete it
	if(file_exists($filename))
	{
		unlink($filename);
	}

	// open file in insert mode
	$file = fopen($filename, "w+");
	$filedate = date("d.m.Y");

	$page_classeMGR ="";
	$page_classeMGR = "<?php
/*
*
* -------------------------------------------------------
* CLASSNAME:        $class
* GENERATION DATE:  $filedate
* CLASS FILE:       $filename
* FOR MYSQL TABLE:  $table
* FOR MYSQL DB:     $dbn
* -------------------------------------------------------
* CODE GENERATED BY:
* MY PHP-MYSQL-CLASS GENERATOR
* from: >> CrystalSkunk
* -------------------------------------------------------
*
*/

// **********************
// CLASS DECLARATION
// **********************

class $class extends PDO
{ 
	private static \$lastInsertId;
	private static \$pdo;

	public function __construct( ) {
		self::\$pdo = Database::getInstance();
	}
";


	$page_classeMGR.="
	// **********************
	// GET ALL
	// **********************

	function getAll()
	{
		\$sql =\"SELECT * FROM $table\";
		try {
			\$result = self::\$pdo->prepare(\$sql);;
			\$result->execute();
			\$data = \$result->fetchAll(Database::FETCH_OBJ);
			return \$data;
		}
		catch (PDOException \$e) {
            die (\$e->getMessage());
        }
	}
	";


	$page_classeMGR.="
	// **********************
	// SELECT 
	// **********************

	function select(\$id)
	{
		\$sql =\"SELECT * FROM $table WHERE $key = :id;\";
		try {
			\$result = self::\$pdo->prepare(\$sql);;
			\$result->bindValue(':id', \$id, PDO::PARAM_STR);
			\$result->execute();
			\$data = \$result->fetch(Database::FETCH_OBJ);
			return \$data;
		}
		catch (PDOException \$e) {
            die (\$e->getMessage());
        }
	}
	";
	
	$page_classeMGR.="
	// **********************
	// DELETE
	// **********************

	function delete(\$id)
	{
		\$sql = \"DELETE FROM $table WHERE $key = :id;\";
		\$result = self::\$pdo->prepare(\$sql);
		\$result->bindValue(':id', \$id, PDO::PARAM_STR);
		\$result->execute();
	}
	";

	$list_bind = '';
	$list_update = '';
	$list_field = '';
	$list_field2 = '';

	$sql = "SHOW COLUMNS FROM $table;";
	$result = $pdo->prepare($sql);
	$result->execute();
	foreach ($result as $row) 
	{
		$col=$row[0];
		if($col!=$key)
		{
			$list_field.= "$col,";
			$list_field2.= ":$col,";
			$list_update.= "$col = :$col,";
			$list_bind.= "\$result->bindValue(':$col', \$data->$col(), PDO::PARAM_STR);
			";
		}
	}
	$list_field = substr($list_field, 0, -1);
	$list_field2 = substr($list_field2, 0, -1);
	$list_update = substr($list_update, 0, -1);
	

	$page_classeMGR.="
	// **********************
	// INSERT
	// **********************

	function insert($classOri \$data)
	{
		\$sql = \"INSERT INTO $table ($list_field) VALUES ($list_field2)\";
		try {
			\$result = self::\$pdo->prepare(\$sql);
			
			$list_bind	
			\$result->execute();
			self::\$lastInsertId = self::\$pdo->lastInsertId();
			\$data = \$this->select(self::\$lastInsertId);
			return \$data;
		}
		catch (PDOException \$e) {
            die (\$e->getMessage());
        }
	}
	";

	$page_classeMGR.="
	// **********************
	// UPDATE
	// **********************

	function update($classOri \$data)
	{
		\$sql = \"UPDATE $table SET $list_update WHERE $key = :id;\";
		
		try {
			\$result = self::\$pdo->prepare(\$sql);
			\$result->bindValue(':id', \$data->$key, PDO::PARAM_STR);
			$list_bind
			\$result->execute();
			\$data = \$this->select(\$data->idclient);
			return \$data;
		}
		catch (PDOException \$e) {
            die (\$e->getMessage());
        }
	}
	";

	$page_classeMGR.= "
}";
	fwrite($file, $page_classeMGR);

	print "
	<font face=\"Arial\" size=\"3\"><b>
			PHP MYSQL Class Generator
		</b>
		<p>
			<font face=\"Arial\" size=\"2\"><b>
					Class '$class' successfully generated as file '$filename'!
					<p>
						<a href=\"javascript:history.back();\">
							back
						</a>

				</b></font>

			


<p><font size=\"1\" face=\"Arial\">this is a script from CrystalSkunk</font></p>";

/*******************************************************************************************/
/******************			FIN	FICHIER	CLASSMGR	****************************************/
/*******************************************************************************************/



/*******************************************************************************************/
/******************		DEBUT	FICHIER	CALL_CLASS	****************************************/
/*******************************************************************************************/

	$filename = $dir . "/call_" . strtolower($classOri) . ".php";

	// if file exists, then delete it
	if(file_exists($filename))
	{
		unlink($filename);
	}

	// open file in insert mode
	$file = fopen($filename, "w+");
	$filedate = date("d.m.Y");



	$sql = "SHOW COLUMNS FROM $table;";
	$result = $pdo->prepare($sql);
	$result->execute();
	$list_tests = "";
	$nomObjetMgr = strtolower("$class");
	$nomObjet = strtolower("$classOri");
	foreach ($result as $row) 
	{
		$col=$row[0];
		$list_tests.= "
				if(isset(\$_POST['" . "$col" . "']))
					$$nomObjet" . "->set" . "$col" . "(\$_POST['" . "$col" . "']);
				";
	}
	$header_calls = "";
	$header_calls .= "<?php
	header('Content-Type: application/json');
	\$authorized = false;
	require_once('LoadClass.php');
	if(isset(\$_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower(\$_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest' && isset(\$_SERVER['HTTP_ORIGIN']) && (\$_SERVER['HTTP_ORIGIN'] == 'YOURDOMAINNAME'))
		\$authorized = true;
	if(!\$authorized){
		if(!isset(\$_POST['token'])){
			echo 'BUUUUG1';
			http_response_code(403);
			exit;
		}
		\$token = new Token();
		\$tokenMgr = new TokenManager();
		\$token = \$tokenMgr->select(\$_POST['token']);
		if(!(\$authorized) && \$token==false){
			echo 'BUUUUG2';
			http_response_code(403);
			exit;
		}
		\$today = new DateTime();
		\$tokenLifetime = new DateTime(\$token->lifetime);
		if (!(\$authorized) && \$tokenLifetime < \$today) {
			echo 'BUUUUG3';
			http_response_code(403);
			exit;
		}
	}
	";	
	$vars_calls = "";
	$vars_calls .= "
	$$nomObjet = new $classOri();
	$$nomObjetMgr = new $class();
	\$lastID = '';
	";
	$core_calls = "";
	$core_calls .= "
		if(isset(\$_POST['action'])){
		logCall$classOri(var_export(\$_POST,true));
		switch(\$_POST['action']){
			case 'insert':
	";
	$core_calls .= $list_tests;
	$core_calls .= "
				$$nomObjet" . " = $$nomObjetMgr" . "->insert($" . "$nomObjet" . ");
				echo json_encode($" . "$nomObjet" . ");
				
			break;
			
			case 'update': 
			";
	$core_calls .= $list_tests;		
	$core_calls .= "
				$$nomObjet" . " = $$nomObjetMgr" . "->update($" . "$nomObjet" . ");
				echo json_encode($" . "$nomObjet" . ");
				
			break;
			
			case 'delete':
				if(isset(\$_POST['" . "$col" . "']))
					$" . "$nomObjetMgr" . "->delete(" . "\$_POST['$key']);
				$" . "$nomObjet" . " = new $classOri();
				\$lastID" . " = null;
			
				echo json_encode($" . "$nomObjet" . ");
				
			break;
			
			case 'select':
				if(isset(\$_POST['$key']))
					$" . "$nomObjet" . " = $" . "$nomObjetMgr" . "->select" . "(\$_POST['$key']);
				else
					$" . "$nomObjet" . " = new $classOri" . "();
				echo json_encode($" . "$nomObjet" . ");
				
			break;
			
			case 'load" . "$classOri" . "':
				\$res = $" . "$nomObjetMgr" . "->getAll();
				echo json_encode(\$res);
				
				break;
			default :
				break;
		}
	}
	else{
		echo \"no arguments\";
	}
	
	function logCallClient(\$string) {
		\$filename = 'log/call_" . "$nomObjet" . ".log';
		\$currentDateTime = date('Y-m-d H:i:s');
		\$line = \"{\$currentDateTime} | {\$string}\\n\";
		file_put_contents(\$filename, \$line, FILE_APPEND | LOCK_EX);
	}
	?>
	";
	
				
	$page_classCall = $header_calls . $vars_calls . $core_calls;
	fwrite($file, $page_classCall);

	print "
	<font face=\"Arial\" size=\"3\"><b>
			PHP MYSQL Class Generator
		</b>
		<p>
			<font face=\"Arial\" size=\"2\"><b>
					Class '$class' successfully generated as file '$filename'!
					<p>
						<a href=\"javascript:history.back();\">
							back
						</a>

				</b></font>

			


<p><font size=\"1\" face=\"Arial\">this is a script from CrystalSkunk</font></p>";	
/*******************************************************************************************/
/******************		FIN		FICHIER	CALL_CLASS	****************************************/
/*******************************************************************************************/

} 
?>